An integer greater than 1 is called a prime number if its only positive divisors (factors) are 1 and itself.
Prime numbers have been studied over the years by a lot of mathematicians. Applications of prime
numbers arise in Cryptography and Coding Theory among others.
Have you tried reversing a prime? For most primes, you get a composite (43 becomes 34). An
Emirp (Prime spelt backwards) is a Prime that gives you a different Prime when its digits are reversed.
For example, 17 is Emirp because 17 as well as 71 are Prime.
In this problem, you have to decide whether a number N is Non-prime or Prime or Emirp. Assume
that 1 < N < 1000000.
Interestingly, Emirps are not new to NTU students. We have been boarding 199 and 179 buses for
quite a long time!

-----------------------------------------------------

The trick of this problem is that 373 is a prime and a emirp.

Precopmute the primes first.

------------------------------------------------------

void precompute(vector <int> &is_prime, int LIMIT)
{
    is_prime[0] = is_prime[1] = false;
    for(int i = 2; i*i <= LIMIT; i++)
    {
        if(is_prime[i])
        {
            for(long long multiple = i*1LL*i; multiple <= LIMIT; multiple += i)
            {
                is_prime[multiple] = false;
            }
        }
    }
}

int main()
{
    const int LIMIT = 1e6 + 1;
    vector <int> is_prime(LIMIT, true);
    precompute(is_prime, LIMIT);

    int n;
    while(scanf("%d", &n) != EOF)
    {
        if(!is_prime[n])
            printf("%d is not prime.\n", n);
        else if(is_prime[n] && (!is_prime[reverse(n)] || n == reverse(n)) )
            printf("%d is prime.\n", n);
        else
            printf("%d is emirp.\n", n);
    }

    return 0;
}